class WMLAction::Parser
rule
    target      : /* nothing */
                | wml_doc { log.debug "Found a target" }

    wml_doc     : tag { log.debug "Found a doc" }

    tag         : OTAG contents CTAG { log.debug("Creating tag #{val[0]}"); return Section.new(name: val[0], content: val[1]) }

    contents    : /* nothing */     { return [] }
                | contents content  { log.debug("Append #{val[1]} to #{val[0]}"); return val[0]? val[0].push(val[1]) : [val[1]] }

    content     : action
                | tag      { log.debug "Found a content subtag #{val[0]}" }
                | attribute
                | filter
                | MACRO    { log.debug "Found a macro #{val[0]}"; return Section::Macro[val[0]] }

    action      : aop tag { log.debug "Found a action tag #{val[0]}:#{val[1]}"; return Section::Action[val[1],val[0]] }
                | aop MACRO { log.debug "Found a action macro #{val[0]}:#{val[1]}"; return Section::Action[Section::Macro[val[1]],val[0]] }

    aop         : '+'
                | '-'

    attribute   : ATTR          { log.debug "Found empty attribute: #{val[0]}"; return Section::Attribute[val[0],''] }
                | ATTR APLAIN   { log.debug "Found plain attribute: #{val[0]}:#{val[1]}"; return Section::Attribute[val[0],val[1]] }
                | ATTR string_val     { log.debug "Found string attribute: #{val[0]}:#{val[1]}"; return Section::Attribute[val[0],val[1]] }
                | ATTR MACRO   { log.debug "Found macro attribute: #{val[0]}:#{val[1]}"; return Section::Attribute[val[0],val[1]] }
                | ATTR ANUMBER  { log.debug "Found numeric attribute: #{val[0]}:#{val[1]}"; return Section::Attribute[val[0],val[1]]  }

    string_val  : ASTR { return " #{val[0]}" }
                | UNDERSC ASTR { return " "+val[0]+" "+val[1] }
                | string_val '+' MACRO { return val[0] + "+" + val[2] }

    filter      : SLASH attribute { log.debug "Found an attribute filter #{val[1]}"; return Section::Filter[*val[1]] }
                | SLASH MACRO { log.debug "Found a macro filter #{val[1]}"; return Section::Filter[val[1],true] }

end

---- header ----
#
# generated by racc
#
require 'wml_action/lexer.rex'
require 'wml_action/section'
require 'wml_action/log'

---- inner ----
include Log

---- footer ----

